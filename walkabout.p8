pico-8 cartridge // http://www.pico-8.com
version 33
__lua__

-- title
-- author

-- global vars

local debug = true  -- (stat(6) == 'debug')

-->8
-- utility

if (debug) menuitem(5,'toggle debug',function() debug = not debug end)

dbg=function()
 poke(0x5f2d, 1)
 local vars,sy={},0
 local mx,my,mb,pb,click,mw,exp,x,y
 function butn(exp,x,y)
  local hover=mx>=x and mx<x+4 and my>=y and my<y+6
  print(exp and "-" or "+",x,y,hover and 7 or 5)
  return hover and click
 end
 function inspect(v,d)
  d=d or 0
  local t=type(v)
  if t=="table" then
   if(d>5)return "[table]"
   local props={}
   for key,val in pairs(v) do
    props[key]=inspect(val,d+1)
   end
   return {
    expand=false,
    props=props
   }
  elseif t=="string" then
   return chr(34)..v..chr(34)
  elseif t=="boolean" then
   return v and "true" or "false"
  elseif t=="nil" or t=="function" or t=="thread" then
   return "["..t.."]"
  else
   return ""..v
  end
 end
 function drawvar(var,name)
  if type(var)=="string" then
   print(name..":",x+4,y,6)
   print(var,x+#(""..name)*4+8,y,7)
   y+=6
  else
   -- expand button
   if(butn(var.expand,x,y))var.expand=not var.expand
   -- name
   print(name,x+4,y,12) y+=6
   -- content
   if var.expand then
    x+=2
    for key,val in pairs(var.props) do
     drawvar(val,key)
    end
    x-=2
   end
  end
 end
 function copyuistate(src,dst)
  if type(src)=="table" and type(dst)=="table" then
   dst.expand=src.expand
   for key,val in pairs(src.props) do
    copyuistate(val,dst.props[key])
   end
  end
 end
 function watch(var,name)
  name=name or "[var]"
  local p,i=vars[name],inspect(var)
  if(p)copyuistate(p,i)
  vars[name]=i
 end
 function clear()
  vars={}
 end
 function draw(dx,dy,w,h)
  dx=dx or 0
  dy=dy or 48
  w=w or 128-dx
  h=h or 128-dy
  -- collapsed mode
  if not exp then
   dx+=w-10
   w,h=10,5
  end
  -- window
  clip(dx,dy,w,h)
  rectfill(0,0,128,128,1)
  x=dx+2 y=dy+2-sy

  -- read mouse
  mx,my,mw=stat(32),stat(33),stat(36)
  mb=band(stat(34),1)~=0
  click=mb and not pb and mx>=dx and mx<dx+w and my>=dy and my<dy+h
  pb=mb

  if exp then

   -- variables
   for k,v in pairs(vars) do
    drawvar(v,k)
   end

   -- scrolling
   local sh=y+sy-dy
   sy=max(min(sy-mw*8,sh-h),0)
  end

  -- expand/collapse btn
  if(butn(exp,dx+w-10,dy))exp=not exp

  -- draw mouse ptr
  clip()
  line(mx,my,mx,my+2,8)
  color(7)
 end

 function show()
  exp=true
  while exp do
   draw()
   flip()
  end
 end

 function prnt(v,name)
  watch(v,name)
  show()
 end

 return{
  watch=watch,
  clear=clear,
  expand=function(val)
   if(val~=nil)exp=val
   return exp
  end,
  draw=draw,
  show=show,
  print=prnt
 }
end
dbg = dbg()

-- any to string (dumptable)
function tostring(any)
 if (type(any)~="table") return tostr(any)
 local str = "{"
 for k,v in pairs(any) do
  if (str~="{") str=str..","
  str=str..tostring(k).."="..tostring(v)
 end
 return str.."}"
end

-- print all arguments
function printa(...)
 local args={...}  -- becomes a table of arguments
 s = ""
 foreach(args, function(a) s = s..','..tostring(a) end)
 printh(s)
end

-- multiple return concatenation
function mrconcat(t, ...)
 for i, v in ipairs({...}) do
  add(t, v)
 end
 return unpack(t)
end

-- random in range
function rndr(a, b) return rnd(b - a) + a end

-- random int
function rndi(n) return flr(rnd(n)) end

function sort(list, keyfunc)
 for i = 2, #list do
  for j = i, 2, -1 do
   if keyfunc(list[j-1]) > keyfunc(list[j]) then
    list[j], list[j-1] = list[j-1], list[j]
   else
    break
   end
  end
 end
end

-- print with shadow
local function prints(s, x, y, c1, c2)
 print(s, x, y+1, c2 or 1)
 print(s, x, y, c1)
end

--yield xn
local function yieldn(n)
 for i=1,n do
  yield()
 end
end

-- simple oo
local function nop() end
local obj = {init = nop}
obj.__index = obj
function obj:__call(...)
 local o = setmetatable({}, self)
 return o, o:init(...)
end
function obj:extend(proto)
 proto = proto or {}
 -- copy meta values, since lua doesn't walk the prototype chain to find them
 for k, v in pairs(self) do
  if sub(k, 1, 2) == "__" then
   proto[k] = v
  end
 end
 proto.__index = proto
 proto.__super = self
 return setmetatable(proto, self)
end

-->8
-- stage classes

local vec = obj:extend{}
function vec:init(x, y)
 self.x, self.y =
 x or 0, y or x or 0
end
function vec:clone() return vec(self.x, self.y) end
function vec:__add(v) return vec(self.x + v.x, self.y + v.y) end
function vec:__sub(v) return vec(self.x - v.x, self.y - v.y) end
function vec:__mul(n) return vec(self.x * n, self.y * n) end
function vec:__tostring() return "(" .. self.x .. ", " .. self.y .. ")" end
function vec:unpack() return self.x, self.y end
function vec:elemx(v)
 -- product w/ vector
 return vec(self.x * v.x, self.y * v.y)
end

local bbox = obj:extend{}
function bbox:init(origin, size)
 self.origin, self.size = origin, size
 local corner = origin + size
 self.x0, self.y0,
 self.x1, self.y1,
 self.w, self.h =
 origin.x, origin.y,
 corner.x, corner.y,
 size:unpack()
end
function bbox:shift(v)
 self.origin += v
 self:init(self.origin, self.size)
 return self
end
function bbox:unpack() return self.x0, self.y0, self.x1, self.y1 end
function bbox:overlaps(other)
 return self.x0 <= other.x1 and other.x0 <= self.x1 and self.y0 <= other.y1 and other.y0 <= self.y1
end
function bbox:within(other)
 return self.x0 > other.x0 and self.x1 < other.x1 and self.y0 > other.y0 and self.y1 < other.y1
end
function bbox:outline(w)
 local vw = vec(w, w)
 return bbox(
  self.origin - vw,
  self.size + vw*2
 )
end
function bbox:center()
 return self.origin + self.size*(1/2)
end
function bbox:itermap()
 -- todo document this
 local x0 = flr(self.x0)
 local x, y = x0 - 1, flr(self.y0)
 return function()
  x += 1
  if x >= self.x1 then
   x = x0
   y += 1
   if (y >= self.y1) return
  end
  return x, y, mget(x, y)
 end
end

-- actors
local actor = obj:extend{
 draw = nop,
 stage = nil,
 z = 0,
 age = -1,
 ttl = nil,
 -- anch: offset between
 -- bounding box and
 -- pos (top left)
 anchor = vec()
}
function actor:init(pos)
 self.pos = pos
end
function actor:update()
 self.age += 1
 if self.ttl and self.age >= self.ttl then
  self:destroy()
 end
end
function actor:destroy() self._doomed = true end

local mob = actor:extend{
 size = vec(7,7),
 anchor = vec(0,0),
 anim = nil,
 frame_len = 1,
 flipx = false,
 flipy = false
}
function mob:init(pos, ...)
 self.spr, self.size = ...
 actor.init(self, pos)
 self.shape = bbox(
  self.pos - self.anchor,
  self.size
 )
end
function mob:update()
 actor.update(self)
 self.shape = bbox(
  self.pos - self.anchor,
  self.size
 )
end
function mob:draw()
 -- caching unpack saves tokens
 local spx, spy = self.pos:unpack()
 local spw, sph = self.size:unpack()
 spw, sph = ceil(spw/8), ceil(sph/8)
 -- anim is a list of frames to loop
 -- frames are sprite ids
 if self.anim then
  local findex = (flr(self.stage.mclock/self.frame_len) % #self.anim) +1
  local frame = self.anim[findex]
  self._frame, self._findex = frame, findex

  -- printh(tostring({i=findex, s=self.name, a=self.anim, f=frame}))
  -- if type(frame) == "function"
  --  frame()
  -- else
  if (frame != false) spr(frame, spx, spy, spw, sph, self.flipx, self.flipy)
 -- end
 else
  spr(self.spr, spx, spy, spw, sph, self.flipx, self.flipy)
 end
 if debug then
  -- print bbox and anchor/origin
  rect(mrconcat({self.shape:unpack()}, 13))
  local temp = (self.pos - self.anchor) --p8tool :(
  line(spx, spy,
   mrconcat({temp:unpack()}, 4))
 end
end

local particle = actor:extend{}
function particle:init(pos, ...)
 actor.init(self, pos)
 self.vel, self.acc, self.ttl, self.col, self.z = ...
end
function particle:update()
 actor.update(self)
 self.vel += self.acc
 self.pos += self.vel
end
function particle:draw()
 pset(self.pos.x, self.pos.y, self.col)
end

-- stage
local stage = obj:extend{}
function stage:init()
 self.objects = {}
 self.mclock = 0
 self.camera = vec()  -- use for map offset
end
function stage:add(object)
 add(self.objects, object)
 object.stage = self
end
function stage:_zsort()
 sort(self.objects, function(a) return a.z end)
end
function stage:update()
 for object in all(self.objects) do
  if object._doomed then
   -- clean up garbage
   del(self.objects, object)
   object.stage = nil
  else
   object:update()
  end
 end
 self.mclock = (self.mclock + 1) % 27720
end
function stage:draw()
 self:_zsort()
 for object in all(self.objects) do
  if (not object._doomed) object:draw()
 end
end

-->8
-- game classes


local o_player = mob(vec(64, 64), 64, vec(15,23))
o_player.ismoving = false
function o_player:update()

 -- player movement
 local vright = vec(1, 0)
 local vdown = vec(0, 1)
 local speed = 2

 local moved = false

 function moveif(step, newspr, flipx)
  local npos = self.pos
  -- local nbox = bbox(
  --  npos - self.anchor, self.size)
  -- if nbox:within(self.arena.shape) then
  npos += step
    self.pos = npos
    self.spr = newspr
    if (flipx != nil) self.flipx = flipx
    moved = true
  -- else
  -- npos = self.pos
  -- end
 end
 -- lrudox
 if (btn(0)) then
  for x=1,speed do
   moveif(vec(-1, 0), 68, true)
  end
 elseif (btn(1)) then
  for x=1,speed do
   moveif(vec(1, 0), 68, false)
  end
 end
 if (btn(2)) then
  for x=1,speed do
   moveif(vec(0, -1), 66)
  end
 elseif (btn(3)) then
  for x=1,speed do
   moveif(vec(0, 1), 64)
  end
 end

 self.ismoving = moved

 mob.update(self)
end

function o_player:draw()
 palt(15, true)
 if self.ismoving and self.stage.mclock % 8 < 4 then
  self.anchor = vec(0, -2)
 else
  self.anchor = vec(0, 0)
 end
 mob.draw(self)
 palt()
end

local room = stage:extend{
 size = vec(16),
}
function room:init(z)
 self.z, self.mapcoords =
  z, vec(z%8, z\8)
 self.origin = self.mapcoords * 16
 self.box = bbox(
  self.origin, self.size)
 stage.init(room)
end
function room:draw()
 cls()
 local x, y = self.origin:unpack()
 map(x, y, x*8, y*8, 16, 16, self.bg_mask)
 stage.draw(self)
end

-->8
--pico-8 builtins

function _init()
 teststage = room(0)
 teststage:add(o_player)
end

function _update()
 teststage:update()
 dbg.watch(teststage,"stage")
 dbg.watch(o_player,"player")
end

function _draw()
 teststage:draw()
 if (debug) dbg.draw()
end
__gfx__
00000000111111112222222233333333000000001111111111111111111111115000000000000005000000000000000000000000000000000000000000000000
000000001111111122222222333333330000000011111111111111111111111156dd555d6d555556000000000000000000000000000000000000000000000000
00000000111111112222222233333333000000001111111111111111111111110dddd555ddd55556000000000000000000000000000000000000000000000000
00000000111111112222222233333333000000001111111111111111111111110ddddd555ddd555d000000000000000000000000000000000000000000000000
00000000111111112222222233333333000000001111111111111111111111110dddddd555ddd555000000000000000000000000000000000000000000000000
00000000111111112222222233333333000000001111111111111111111111110ddddddd555ddd5d000000000000000000000000000000000000000000000000
00000000111111112222222233333333000000001111111111111111111111110dddddddd555dddd000000000000000000000000000000000000000000000000
000000001111111122222222333333330000000011111111111111111111111105dddddddd555ddd000000000000000000000000000000000000000000000000
444444445555555566666666777777772222222255555555ddddddddffffffff055dddddddd555d600000000000000000000000000000000dddddddddddddddd
444444445555555566666666777777772222222255555555ddddddddffffffff0d55dddddddd555d00000000000000000000000000000000d66666666666666d
444444445555555566666666777777772222222255555555ddddddddffffffff0dd55dddddddd55d00000000000000000000000000000000d66666666666666d
444444445555555566666666777777772222222255555555ddddddddffffffff0ddd555ddddddddd00000000000000000000000000000000d66666666666666d
444444445555555566666666777777772222222255555555ddddddddffffffff05ddd55ddddddddd00000000000000000000000000000000d66666666666666d
444444445555555566666666777777772222222255555555ddddddddffffffff055ddd55dddddddd00000000000000000000000000000000d66666666666666d
444444445555555566666666777777772222222255555555ddddddddffffffff0d5ddddddddddd6600000000000000000000000000000000d66666666666666d
444444445555555566666666777777772222222255555555ddddddddffffffff000000000000000000000000000000000000000000000000d66666666666666d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666666d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666666d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666656d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666565d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666656d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666666d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666666d
8888888899999999aaaaaaaabbbbbbbb2222222299999999aaaaaaaa33333333000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000d66666666666666d
ccccccccddddddddeeeeeeeeffffffff3333333355555555eeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000dddddddddddddddd
fffffffffffffffffffffffffffffffffffffffffffffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffffffffffffffffffffffffffffffffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffffffffffffffffffffffffffffffffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
fffffffffffffffffffffffffffffffffffffffffffffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
ffff1111111fffffffff1111111ffffffff1111111fffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
fff177777771fffffff177777771ffffff177777771ffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
ff17777777771fffff17777777771ffff17777777771fff077777777777777770000000000000000000000000000000000000000000000000000000000000000
f1777777777771fff1777777777771ff1777777777771ff077777777777777770000000000000000000000000000000000000000000000000000000000000000
f1777777777771fff1777777777771ff1777777777771ff077777777777777770000000000000000000000000000000000000000000000000000000000000000
f1777177717771fff1777777777771ff1777777777171ff077777777777777770000000000000000000000000000000000000000000000000000000000000000
f1777077707771fff1777777777771ff1777777777171ff077777777777777770000000000000000000000000000000000000000000000000000000000000000
f1777777777771fff1777777777771ff1777777777771ff077777777777777770000000000000000000000000000000000000000000000000000000000000000
f177777d777771fff1777777777771ff1777777777771ff077777777777777770000000000000000000000000000000000000000000000000000000000000000
ff17777777771fffff17777777771ffff17777777771fff077777777777777770000000000000000000000000000000000000000000000000000000000000000
fff177777771fffffff177777771ffffff177777771ffff077777777777777770000000000000000000000000000000000000000000000000000000000000000
ffff1111111fffffffff1111111ffffffff1111111fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1777771fffffffff1777771ffffffff1777771fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1777771fffffffff1777771ffffffff1777771fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1777771fffffffff1777771ffffffff1777771fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1777771fffffffff1777771ffffffff1777771fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffff11111fffffffffff11111ffffffffff11111ffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffff1fff1fffffffffff1fff1ffffffffff1fff1ffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffff1fff1fffffffffff1fff1ffffffffff1fff1ffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1fffff1fffffffff1fffff1fffffffff1ffff1fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffff1ffffffffffeeeee1eeeeeeeeeeffffff1ffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff11f111111fffeeee111111111eeefffff11f11111ff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ff1111111111ffffeee11111111111eefff1111111111ff000000000000000000000000000000000000000000000000000000000000000000000000000000000
f1111111111111ffe1e11111111111eef1f1111111111ff000000000000000000000000000000000000000000000000000000000000000000000000000000000
f19111111111911fe11191111119111ef1111191111111f000000000000000000000000000000000000000000000000000000000000000000000000000000000
f199111111199111e11911111111911ef11111991111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
f19911111119911fe11111111111111ef1111199111111f000000000000000000000000000000000000000000000000000000000000000000000000000000000
f111d111d11111ffe1111111111111eef11111d1111611f000000000000000000000000000000000000000000000000000000000000000000000000000000000
f111d11d116111ffe1111111111111eef11111d66111111000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111d9161961111f111111111111111e111111d6691611f000000000000000000000000000000000000000000000000000000000000000000000000000000000
f1d1d916196161ffee111111111111eef1111dd669161ff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ff1dd5666d6611ffeee1111111111eeeff1111d66dd61ff000000000000000000000000000000000000000000000000000000000000000000000000000000000
fff11d111611ffffeee111111111eeeefff11ddd1161fff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1dd6661fffffeeee1111111eeeeefffff1dd661ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffff11111ffffffeeeee111111eeeeefffff11111fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1055101fffffeeee1000000eeeeefffff10051fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1050001fffffeeee1000000eeeeeffff1000551ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1000501fffffeeee1000000eeeeeffff1000501ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1015501fffffeeee1000000eeeeeffff1000151ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1511111fffffeeee1511115eeeeeffff1511111ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1555551fffffeeee1551555eeeeeffff155551fffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ffff1551551fffffeee111515511eeeefffff1551ffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ff10551110551fffeee0001111051eeefffff100551ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
ff11111f11111fffeee1111111111eeefffff111111ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000
__map__
0a0a0a0b0a0b0a0b0a0b0a0b0a0b0a0b0a0b0a0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0a0b1a1b1a1b1a1b1a1b1e1f1a1b1a1b1a1b1a1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1a0a0b0a0b0a0b0a0b0a2e2f0b0a0a0b0a0b0a0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0a1a1b1a1b1a1b1a1b1a3e3f1b1a1a1b1a1b1a1b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0809080908090809080908090809080908090809080900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1819181918191819181918191819181918191819181900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0809080908090809080908090809080908090809080900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1819181918191819181918191819181918191819181900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
