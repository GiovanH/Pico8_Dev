pico-8 cartridge // http://www.pico-8.com
version 33
__lua__

-- title
-- author

-- global vars

local debug = true  -- (stat(6) == 'debug')
local o_player

local flag_walkable = 0b1

-->8
-- utility

if (debug) menuitem(5,'toggle debug',function() debug = not debug end)

dbg=function()
 poke(0x5f2d, 1)
 local vars,sy={},0
 local mx,my,mb,pb,click,mw,exp,x,y
 function butn(exp,x,y)
  local hover=mx>=x and mx<x+4 and my>=y and my<y+6
  print(exp and "-" or "+",x,y,hover and 7 or 5)
  return hover and click
 end
 function inspect(v,d)
  d=d or 0
  local t=type(v)
  if t=="table" then
   if(d>5)return "[table]"
   local props={}
   for key,val in pairs(v) do
    props[key]=inspect(val,d+1)
   end
   return {
    expand=false,
    props=props
   }
  elseif t=="string" then
   return chr(34)..v..chr(34)
  elseif t=="boolean" then
   return v and "true" or "false"
  elseif t=="nil" or t=="function" or t=="thread" then
   return "["..t.."]"
  else
   return ""..v
  end
 end
 function drawvar(var,name)
  if type(var)=="string" then
   print(name..":",x+4,y,6)
   print(var,x+#(""..name)*4+8,y,7)
   y+=6
  else
   -- expand button
   if(butn(var.expand,x,y))var.expand=not var.expand
   -- name
   print(name,x+4,y,12) y+=6
   -- content
   if var.expand then
    x+=2
    for key,val in pairs(var.props) do
     drawvar(val,key)
    end
    x-=2
   end
  end
 end
 function copyuistate(src,dst)
  if type(src)=="table" and type(dst)=="table" then
   dst.expand=src.expand
   for key,val in pairs(src.props) do
    copyuistate(val,dst.props[key])
   end
  end
 end
 function watch(var,name)
  name=name or "[var]"
  local p,i=vars[name],inspect(var)
  if(p)copyuistate(p,i)
  vars[name]=i
 end
 function clear()
  vars={}
 end
 function draw(dx,dy,w,h)
  dx=dx or 0
  dy=dy or 48
  w=w or 128-dx
  h=h or 128-dy
  -- collapsed mode
  if not exp then
   dx+=w-10
   w,h=10,5
  end
  -- window
  clip(dx,dy,w,h)
  rectfill(0,0,128,128,1)
  x=dx+2 y=dy+2-sy

  -- read mouse
  mx,my,mw=stat(32),stat(33),stat(36)
  mb=band(stat(34),1)~=0
  click=mb and not pb and mx>=dx and mx<dx+w and my>=dy and my<dy+h
  pb=mb

  if exp then

   -- variables
   for k,v in pairs(vars) do
    drawvar(v,k)
   end

   -- scrolling
   local sh=y+sy-dy
   sy=max(min(sy-mw*8,sh-h),0)
  end

  -- expand/collapse btn
  if(butn(exp,dx+w-10,dy))exp=not exp

  -- draw mouse ptr
  clip()
  line(mx,my,mx,my+2,8)
  color(7)
 end

 function show()
  exp=true
  while exp do
   draw()
   flip()
  end
 end

 function prnt(v,name)
  watch(v,name)
  show()
 end

 return{
  watch=watch,
  clear=clear,
  expand=function(val)
   if(val~=nil)exp=val
   return exp
  end,
  draw=draw,
  show=show,
  print=prnt
 }
end
dbg = dbg()

-- any to string (dumptable)
function tostring(any)
 if (type(any)~="table") return tostr(any)
 local str = "{"
 for k,v in pairs(any) do
  if (str~="{") str=str..","
  str=str..tostring(k).."="..tostring(v)
 end
 return str.."}"
end

-- print all arguments
function printa(...)
 local args={...}  -- becomes a table of arguments
 s = ""
 foreach(args, function(a) s = s..','..tostring(a) end)
 printh(s)
end

-- multiple return concatenation
function mrconcat(t, ...)
 for i, v in ipairs({...}) do
  add(t, v)
 end
 return unpack(t)
end

-- reset with one transparent color
function paltt(t)
 palt()
 palt(t, true)
end

-- random in range
function rndr(a, b) return rnd(b - a) + a end

-- random int
function rndi(n) return flr(rnd(n)) end

function sort(list, keyfunc)
 for i = 2, #list do
  for j = i, 2, -1 do
   if keyfunc(list[j-1]) > keyfunc(list[j]) then
    list[j], list[j-1] = list[j-1], list[j]
   else
    break
   end
  end
 end
end

function clamp(min_, query, max_)
 return min(max_, max(min_, query))
end

-- print with shadow
local function prints(s, x, y, c1, c2)
 print(s, x, y+1, c2 or 1)
 print(s, x, y, c1 or 7)
end

--yield xn
local function yieldn(n)
 for i=1,n do
  yield()
 end
end

-- simple oo
local function nop() end
local obj = {init = nop}
obj.__index = obj
function obj:__call(...)
 local o = setmetatable({}, self)
 return o, o:init(...)
end
function obj:extend(proto)
 proto = proto or {}
 -- copy meta values, since lua doesn't walk the prototype chain to find them
 for k, v in pairs(self) do
  if sub(k, 1, 2) == "__" then
   proto[k] = v
  end
 end
 proto.__index = proto
 proto.__super = self
 return setmetatable(proto, self)
end

-->8
-- stage classes

local vec = obj:extend{}
function vec:init(x, y)
 self.x, self.y =
 x or 0, y or x or 0
end
function vec:clone() return vec(self.x, self.y) end
function vec:__add(v) return vec(self.x + v.x, self.y + v.y) end
function vec:__sub(v) return vec(self.x - v.x, self.y - v.y) end
function vec:__mul(n) return vec(self.x * n, self.y * n) end
function vec:__tostring() return "(" .. self.x .. ", " .. self.y .. ")" end
function vec:unpack() return self.x, self.y end
function vec:elemx(v)
 -- product w/ vector
 return vec(self.x * v.x, self.y * v.y)
end

local bbox = obj:extend{}
function bbox:init(origin, size)
 self.origin, self.size = origin, size
 local corner = origin + size
 self.x0, self.y0,
 self.x1, self.y1,
 self.w, self.h =
 origin.x, origin.y,
 corner.x, corner.y,
 size:unpack()
end
function bbox:shift(v)
 self.origin += v
 self:init(self.origin, self.size)
 return self
end
function bbox:unpack() return self.x0, self.y0, self.x1, self.y1 end
function bbox:overlaps(other)
 return self.x0 <= other.x1 and other.x0 <= self.x1 and self.y0 <= other.y1 and other.y0 <= self.y1
end
function bbox:within(other)
 return self.x0 > other.x0 and self.x1 < other.x1 and self.y0 > other.y0 and self.y1 < other.y1
end
function bbox:outline(w)
 local vw = vec(w, w)
 return bbox(
  self.origin - vw,
  self.size + vw*2
 )
end
function bbox:__mul(n) return bbox(self.origin*n, self.size*n) end
function bbox:center()
 return self.origin + self.size*(1/2)
end
-- function bbox:itermap()
--  -- todo document this
--  local x0 = flr(self.x0)
--  local x, y = x0 - 1, flr(self.y0)
--  return function()
--   x += 1
--   if x >= self.x1 then
--    x = x0
--    y += 1
--    if (y >= self.y1) return
--   end
--   return x, y, mget(x, y)
--  end
-- end
function bbox:maptiles()
 -- todo document this
 local tiles = {}
 for x = flr(self.x0/8), flr(self.x1/8) do
  for y = flr(self.y0/8), flr(self.y1/8) do
   local i = mget(x, y)
   add(tiles, {spr=i, flags=fget(i)})
  end
 end
 return tiles
end

-- actors
local actor = obj:extend{
 draw = nop,
 stage = nil,
 z = 0,
 age = -1,
 ttl = nil,
 -- anch: offset between
 -- bounding box and
 -- pos (top left)
 anchor = vec()
}
function actor:init(pos)
 self.pos = pos
end
function actor:update()
 self.age += 1
 if self.ttl and self.age >= self.ttl then
  self:destroy()
 end
 -- camera perspective
 self.z = self.pos.y
end
function actor:destroy() self._doomed = true end

local mob = actor:extend{
 size = vec(7,7),
 anchor = vec(0,0),
 anim = nil,
 frame_len = 1,
 flipx = false,
 flipy = false
}
function mob:init(pos, ...)
 self.spr, self.size = ...
 actor.init(self, pos)
 self.bsize = self.size
 self.shape = bbox(
  self.pos,
  self.bsize
 )
end
function mob:update()
 actor.update(self)
 self.shape = bbox(
  self.pos,
  self.bsize
 )
end
function mob:draw()
 -- caching unpack saves tokens
 local temp = (self.pos + self.anchor)  -- picotool :(
 local spx, spy = temp:unpack()
 local spw, sph = self.size:unpack()
 spw, sph = ceil(spw/8), ceil(sph/8)
 -- anim is a list of frames to loop
 -- frames are sprite ids
 if self.anim then
  local findex = (flr(self.stage.mclock/self.frame_len) % #self.anim) +1
  local frame = self.anim[findex]
  self._frame, self._findex = frame, findex

  -- printh(tostring({i=findex, s=self.name, a=self.anim, f=frame}))
  -- if type(frame) == "function"
  --  frame()
  -- else
  if (frame != false) spr(frame, spx, spy, spw, sph, self.flipx, self.flipy)
 -- end
 else
  spr(self.spr, spx, spy, spw, sph, self.flipx, self.flipy)
 end
 if debug then
  -- print bbox and anchor/origin
  rect(mrconcat({self.shape:unpack()}, 13))
  line(spx, spy,
   mrconcat({self.pos:unpack()}, 4))
  pset(spx, spy, 5)
 end
end

local particle = actor:extend{}
function particle:init(pos, ...)
 actor.init(self, pos)
 self.vel, self.acc, self.ttl, self.col, self.z = ...
end
function particle:update()
 actor.update(self)
 self.vel += self.acc
 self.pos += self.vel
end
function particle:draw()
 pset(self.pos.x, self.pos.y, self.col)
end

-- stage
local stage = obj:extend{}
function stage:init()
 self.objects = {}
 self.mclock = 0
 self.camera = vec()  -- use for map offset
end
function stage:add(object)
 add(self.objects, object)
 object.stage = self
end
function stage:_zsort()
 sort(self.objects, function(a) return a.z end)
end
function stage:update()
 for object in all(self.objects) do
  if object._doomed then
   -- clean up garbage
   del(self.objects, object)
   object.stage = nil
  else
   object:update()
  end
 end
 self.mclock = (self.mclock + 1) % 27720
end
function stage:draw()
 self:_zsort()
 for object in all(self.objects) do
  if (not object._doomed) object:draw()
 end
end

-->8
-- game utility

-- dialog box
-- by rusty bailey

dialoger = {
 x = 8,
 y = 97,
 color = 7,
 max_chars_per_line = 27,
 max_lines = 4,
 queue = {},
 blinking_counter = 0,
 init = function(self)
 end,
 enqueue = function(self, message) --, autoplay)
  -- default autoplay to false
  -- autoplay = type(autoplay) == "nil" and false or autoplay
  add(self.queue, {
    message = message,
    -- autoplay = autoplay
   })

  if (#self.queue == 1) then
   self:trigger(self.queue[1].message) -- , self.queue[1].autoplay)
  end
 end,
 trigger = function(self, message) -- , autoplay)
  --self.autoplay = autoplay
  self.current_message = ''
  self.messages_by_line = nil
  self.animation_loop = nil
  self.current_line_in_table = 1
  self.current_line_count = 1
  self.pause_dialog = false
  self:format_message(message)
  self.animation_loop = cocreate(self.animate_text)
 end,
 format_message = function(self, message)
  local total_msg = {}
  local word = ''
  local letter = ''
  local current_line_msg = ''

  for i = 1, #message do
   -- get the current letter add
   letter = sub(message, i, i)

   -- keep track of the current word
   word ..= letter

   -- if it's a space or the end of the message,
   -- determine whether we need to continue the current message
   -- or start it on a new line
   if letter == ' ' or i == #message then
    -- get the potential line length if this word were to be added
    local line_length = #current_line_msg + #word
    -- if this would overflow the dialog width
    if line_length > self.max_chars_per_line then
     -- add our current line to the total message table
     add(total_msg, current_line_msg)
     -- and start a new line with this word
     current_line_msg = word
    else
     -- otherwise, continue adding to the current line
     current_line_msg ..= word
    end

    -- if this is the last letter and it didn't overflow
    -- the dialog width, then go ahead and add it
    if i == #message then
     add(total_msg, current_line_msg)
    end

    -- reset the word since we've written
    -- a full word to the current message
    word = ''
   end
  end

  self.messages_by_line = total_msg
 end,
 animate_text = function(self)
  -- for each line, write it out letter by letter
  -- if we each the max lines, pause the coroutine
  -- wait for input in update before proceeding
  for k, line in pairs(self.messages_by_line) do
   self.current_line_in_table = k
   for i = 1, #line do
    self.current_message ..= sub(line, i, i)

    -- press btn 5 to skip to the end of the current passage
    -- otherwise, print 1 character per frame
    -- with sfx about every 5 frames
    if (not btnp(5)) then
     if (i % 5 == 0) sfx(0)
     yield()
    end
   end
   self.current_message ..= '\n'
   self.current_line_count += 1
   if ((self.current_line_count > self.max_lines) or (self.current_line_in_table == #self.messages_by_line)) then --  and not self.autoplay)) then
    self.pause_dialog = true
    yield()
   end
  end

  -- if (self.autoplay) then
  --  self.delay(30)
  -- end
 end,
 shift = function (t)
  local n=#t
  for i = 1, n do
   if i < n then
    t[i] = t[i + 1]
   else
    t[i] = nil
   end
  end
 end,
 -- helper function to add delay in coroutines
 delay = function(frames)
  for i = 1, frames do
   yield()
  end
 end,
 update = function(self)
  if (self.animation_loop and costatus(self.animation_loop) != 'dead') then
   if (not self.pause_dialog) then
    coresume(self.animation_loop, self)
   else
    if btnp(4) then
     self.pause_dialog = false
     self.current_line_count = 1
     self.current_message = ''
    end
   end
  elseif (self.animation_loop and self.current_message) then
   -- if (self.autoplay) self.current_message = ''
   self.animation_loop = nil
  end

  if (not self.animation_loop and #self.queue > 0) then
   self.shift(self.queue, 1)
   if (#self.queue > 0) then
    self:trigger(self.queue[1].message) -- , self.queue[1].autoplay)
    coresume(self.animation_loop, self)
   end
  end

  --if (not self.autoplay) then
  self.blinking_counter += 1
  if self.blinking_counter > 30 then self.blinking_counter = 0 end
  --end
 end,
 draw = function(self)
  local screen_width = 128

  -- display message
  if (self.current_message) then
   rectfill(0,90,127,127,0)
   rect(0,90,127,127,7)
   print(self.current_message, self.x, self.y, self.color)
  end

  -- draw blinking cursor at the bottom right
  if (self.pause_dialog) then -- not self.autoplay and 
   if self.blinking_counter > 15 then
    if (self.current_line_in_table == #self.messages_by_line) then
     -- draw square
     rectfill(
      screen_width - 11,
      screen_width - 10,
      screen_width - 11 + 3,
      screen_width - 10 + 3,
      7
     )
    else
     -- draw arrow
     line(screen_width - 12, screen_width - 9, screen_width - 8,screen_width - 9)
     line(screen_width - 11, screen_width - 8, screen_width - 9,screen_width - 8)
     line(screen_width - 10, screen_width - 7, screen_width - 10,screen_width - 7)
    end
   end
  end
 end
}

-->8
-- game classes

local t_sign = mob:extend{
 lines = nil
}
function t_sign:addline(text)
 if (self.lines == nil) self.lines = {}
 add(self.lines, text)
end
function t_sign:interact(player)
 for _, v in ipairs(self.lines) do
  dialoger:enqueue(v)
 end
end

local t_button = mob:extend{
 lines = nil
}
function t_button:interact(player)
 sfx(001)
end

local t_player = mob:extend{
 ismoving = false,
 hitbox = nil,
 facing = 'd',
 spr0 = 64,
 anchor = vec(-8, -24)
}
function t_player:init(pos)
 mob:init(pos, 64, vec(15,23))
end
function t_player:get_hitbox(pos)
 return bbox(
  pos + vec(-8, -7),
  vec(15, 7)
 )
end
function t_player:move()
 -- player movement
 local vright = vec(1, 0)
 local vdown = vec(0, 1)
 local speed = 2

 local moved = false

 function moveif(step, facing)
  local npos = self.pos + step
  local nhbox = self:get_hitbox(npos)
  local unobstructed = true
  dbg.watch(nhbox:maptiles(), "hittiles")
  for i,tile in pairs(nhbox:maptiles()) do
   if band(tile.flags, flag_walkable) == 0 then
    unobstructed = false
    break
   end
  end
  for _,obj in pairs(self.stage.objects) do
   if (nhbox:overlaps(obj.shape) and obj.obstructs) then
    unobstructed = false
    break
   end
  end
  self.facing = facing
  if unobstructed then
   self.pos = npos
   moved = true
  end
 end
 -- lrudox
 if (btn(0)) then
  for x=1,speed do
   moveif(vec(-1, 0), 'l')
  end
 elseif (btn(1)) then
  for x=1,speed do
   moveif(vec(1, 0), 'r')
  end
 end
 if (btn(2)) then
  for x=1,speed do
   moveif(vec(0, -1), 'u')
  end
 elseif (btn(3)) then
  for x=1,speed do
   moveif(vec(0, 1), 'd')
  end
 end

 self.ismoving = moved

 self.stage.camfocus = self.pos
end
function t_player:tryinteract()
 -- try interact
 local facemap = {d=vec(0,1), u=vec(0,-1), l=vec(-1,0), r=vec(1,0)}
 if (btnp(4)) then
  self.ibox = bbox(
   self.pos + self.anchor - vec(0, -8) + facemap[self.facing]*8,
   vec(2,2)*8
  )
  for _,obj in pairs(self.stage.objects) do
   if (self.ibox:overlaps(obj.shape) and obj.interact) then
    obj:interact(self)
    break
   end
  end
 else
  self.ibox = nil
 end
end
function t_player:update()

 self:move()

 self:tryinteract()

 mob.update(self)
 self.shape = self:get_hitbox(self.pos)
end

function t_player:draw()
 paltt(15)
 self.flipx = (self.facing == 'l')
 local facemap = {d=0, u=2, l=4, r=4}
 self.spr = self.spr0 + facemap[self.facing]
 if self.ismoving and self.stage.mclock % 8 < 4 then
  self.anchor = vec(-8, -23)
 else
  self.anchor = vec(-8, -24)
 end
 mob.draw(self)
 if (debug) rect(mrconcat({self.shape:unpack()}, 5))
 if (debug and self.ibox) rect(mrconcat({self.ibox:unpack()}, 10))
 palt()
end

local room = stage:extend{
 camfocus = nil
}
function room:init(mx, my, mw, mh)
 self.box_map = bbox(vec(mx, my), vec(mw, mh))
 self.box_cells = self.box_map*16
 self.box_px = self.box_cells*8

 -- origin in units
 self.origin_map = vec(mx, my)
 self.origin_cells = self.origin_map*16
 self.origin_px = self.origin_cells*8

 -- extent in units
 self.extent_map = vec(mw, mh)
 self.extent_cells = self.extent_map*16
 self.extent_px = self.extent_cells*8
 stage.init(room)
end
function room:draw()
 local cell_x, cell_y = self.box_cells.origin:unpack()
 local cell_w, cell_h = self.box_cells.size:unpack()
 local sx, sy = self.box_px.origin:unpack()

 cls()
 local cam = self.camfocus - vec(64, 64)
 local cx0, cy0, cx1, cy1 = self.box_px:unpack()
 cam.x = clamp(cx0, cam.x, cx1-128)
 cam.y = clamp(cy0, cam.y, cy1-128)


 camera(cam:unpack())

 dbg.watch(cam,"cam")
 map(cell_x, cell_y, sx, sy, cell_w, cell_h)
 stage.draw(self)
 camera()
 if debug and o_player then 
  -- rect(mrconcat({self.box_px:unpack()}, 10))
  prints('plr  ' .. tostring(o_player.pos), 0, 0)
  prints('room ' .. tostring(self.box_map), 0, 8)
  prints('area ' .. tostring(self.box_px), 0, 16)
  prints('cam ' .. tostring(cam), 0, 24)
  prints(tostring(self.camfocus), 64, 24)
 end
 
end
function room:add(object)
 object.pos += self.box_px.origin
 stage.add(self, object)
end

-->8
--pico-8 builtins

cur_room = nil

function room_complab()
 cur_room = room(0, 1, 1, 1)
 o_player = t_player(vec(12, 64))
 o_player.pos += vec(12, 12)
 cur_room:add(o_player)

 o_computer = t_sign(vec(88, 8), 112, vec(15, 7))
 o_computer:addline(
  "looks like someone was " ..
  "planning a fundraising " ..
  "campaign for a video game.")
 o_computer:addline("too bad they're just a troll.")
 o_computer.bsize = vec(15,15)
 cur_room:add(o_computer)

 o_computer2 = t_sign(vec(56, 8), 010, vec(15, 15))
 o_computer2:addline(
  "two white lines of text are blown up to fill the entire screen.")
 o_computer2:addline("it's so huge you can read it from across the room.")
 cur_room:add(o_computer2)

 o_portal = t_button(vec(12, 64), 005, vec(23, 15))
 -- o_portal.obstructs = true
 cur_room:add(o_portal)
 function o_portal:interact(p)
  room_hallway()
 end

 cur_room:update() -- one predraw update
 sfx(001)
end

function room_hallway()
 cur_room = room(0, 0, 2, 1)
 o_player = t_player(vec(12, 64))
 cur_room:add(o_player)
 cur_room.camfocus = vec(0, 0)

 cur_room:update() -- one predraw update
 sfx(001)
end

function _init()
 room_complab()
end

function _update()
 dialoger:update()
 if #dialoger.queue == 0 then
  cur_room:update()
 end

 dbg.watch(dialog,"dialog")
 dbg.watch(cur_room,"cur_room")
 dbg.watch(o_player,"player")
 dbg.watch(cur_room.objects,"objects")
end

function _draw()
 cur_room:draw()
 if #dialoger.queue > 0 then
  dialoger:draw()
 end
 if (debug) dbg.draw()
end
__gfx__
00112233000000000000000000000000000000000000000000055000000000005000000000000005000000000000000000000000000000000000000000000000
0011223300000000000000000000000000000000555d6d55555656dd555d6d5556dd555d6d555556055555555555555055dddd55000000000000000000000000
4455667700000000000000000000000000000000d555ddd555560dddd555ddd50dddd555ddd55556011111111111111055555555000000000000000000000000
4455667700000000000000000000000000000000dd555ddd555d0ddddd555ddd0ddddd555ddd555d015000000000051051111115000000000000000000000000
8899aabb00000000000000000000000000000000ddd555ddd5550dddddd555dd0dddddd555ddd555015066066060051051111115000000000000000000000000
8899aabb00000000000000000000000000000000dddd5551111111111ddd555d0ddddddd555ddd5d015000000000051051111115000000000000000000000000
ccddeeff00000000000000000000000000000000dddd1111115115111111d5550dddddddd555dddd015066666066051051111115000000000000000000000000
ccddeeff00000000000000000000000000000000dd111111111551111111115505dddddddd555ddd015000000000051051111115000000000000000000000000
0011111100000000000000000000000000000000dd11111115511551111111d5055dddddddd555d601555555555555105111111500000000dddddddddddddddd
0011111100000000000000000000000000000000d1111115115115115111111d0d55dddddddd555d01111111111111105111111500000000d66666666666666d
2255ddff0000000000000000000000000000000051221111151111511111221d0dd55dddddddd55d50000000000000005111111500000000d66666666666666d
2255ddff0000000000000000000000000000000051112221111111111222111d0ddd555ddddddddd11101115551101105111111500000000d66666666666666d
2299aa3300000000000000000000000000000000d55111122222222221111ddd05ddd55ddddddddd10000000000000005111111500000000d66666666666666d
2299aa3300000000000000000000000000000000dd55dd11111111111155dddd055ddd55dddddddd06565566666565605111111500000000d66666666666666d
3355eeee00000000000000000000000000000000dddddddddd660d5ddddddddd0d5ddddddddddd6601111155555111105111111500000000d66666666666666d
3355eeee00000000000000000000000000000000000000000000000000000000000000000000000010000000000000005111111500000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000511111155111111500000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000555555555555555555555550511111155111111500000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000511111111111111111111115111111155111111500000000d66666666666656d
000000000000000000000000000000000000000000000000000000000000000051111111111111111111111511111115d555555d00000000d66666666666565d
0000000000000000000000000000000000000000000000000000000000000000511111111111111111111115111111155ddd55dd00000000d66666666666656d
00000000000000000000000000000000000000000000000000000000000000005111111111111111111111151111111555ddd55d00000000d66666666666666d
00000000000000000000000000000000000000000000000000000000000000005111111111111111111111151111111555dddddd00000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000511111111111111111111115111155500000000000000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000055000000000000000000560511111150000000000000000d66666666666666d
00000000000000000000000000000000000000000000000000000000000000000d51111111111111111115d0511111150000000000000000d66666666666666d
00000000000000000000000000000000000000000000000000000000000000000d51111111111111111115d0511111110000000000000000d66666666666666d
00000000000000000000000000000000000000000000000000000000000000000dd555555555555555555dd0511111110000000000000000d66666666666666d
000000000000000000000000000000000000000000000000000000000000000005ddd5555ddd55ddddddddd0511111110000000000000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000055ddd5555ddd55dddddddd0511111110000000000000000d66666666666666d
00000000000000000000000000000000000000000000000000000000000000000d5dddd555ddddddddddd660511111110000000000000000d66666666666666d
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055511110000000000000000dddddddddddddddd
fffffffffffffffffffffffffffffffffffffffffffffffffffff1fffffffffffffff1fffffffffffffffff1ffffffff00000000000000000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffffff11f111111fffffff111111111fffffffff11f11111ff00000000000000000000000000000000
ffffffffffffffffffffffffffffffffffffffffffffffffff1111111111fffffff11111111111ffffff1111111111ff00000000000000000000000000000000
fffffffffffffffffffffffffffffffffffffffffffffffff1111111111111fff1f11111111111ffff1f1111111111ff00000000000000000000000000000000
ffff1111111fffffffff1111111fffffffff1111111ffffff19111111111911ff11191111119111fff1111191111111f00000000000000000000000000000000
fff177777771fffffff177777771fffffff177777771fffff199111111199111f11911111111911fff1111199111111100000000000000000000000000000000
ff17777777771fffff17777777771fffff17777777771ffff19911111119911ff11111111111111fff1111199111111f00000000000000000000000000000000
f1777777777771fff1777777777771fff1777777777771fff111d111d11111fff1111111111111ffff11111d1111611f00000000000000000000000000000000
f1777777777771fff1777777777771fff1777777777771fff111d11d116111fff1111111111111ffff11111d6611111100000000000000000000000000000000
f1777177717771fff1777777777771fff1777777777171ff1111d9161961111f111111111111111ff111111d6691611f00000000000000000000000000000000
f1777077707771fff1777777777771fff1777777777171fff1d1d916196161ffff111111111111ffff1111dd669161ff00000000000000000000000000000000
f1777777777771fff1777777777771fff1777777777771ffff1dd5666d6611fffff1111111111ffffff1111d66dd61ff00000000000000000000000000000000
f177777d777771fff1777777777771fff1777777777771fffff11d111611fffffff111111111ffffffff11ddd1161fff00000000000000000000000000000000
ff17777777771fffff17777777771fffff17777777771fffffff1dd6661fffffffff1111111fffffffffff1dd661ffff00000000000000000000000000000000
fff177777771fffffff177777771fffffff177777771fffffffff11111fffffffffff111111fffffffffff11111fffff00000000000000000000000000000000
ffff1111111fffffffff1111111fffffffff1111111fffffffff1055101fffffffff1000000fffffffffff10051fffff00000000000000000000000000000000
ffff1777771fffffffff1777771fffffffff1777771fffffffff1050001fffffffff1000000ffffffffff1000551ffff00000000000000000000000000000000
ffff1777771fffffffff1777771fffffffff1777771fffffffff1000501fffffffff1000000ffffffffff1000501ffff00000000000000000000000000000000
ffff1777771fffffffff1777771fffffffff1777771fffffffff1015501fffffffff1000000ffffffffff1000151ffff00000000000000000000000000000000
ffff1777771fffffffff1777771fffffffff1777771fffffffff1511111fffffffff1511115ffffffffff1511111ffff00000000000000000000000000000000
fffff11111fffffffffff11111fffffffffff11111ffffffffff1555551fffffffff1551555ffffffffff155551fffff00000000000000000000000000000000
fffff1fff1fffffffffff1fff1fffffffffff1fff1ffffffffff1551551ffffffff111515511ffffffffff1551ffffff00000000000000000000000000000000
fffff1fff1fffffffffff1fff1fffffffffff1fff1ffffffff10551110551ffffff0001111051fffffffff100551ffff00000000000000000000000000000000
ffff1fffff1fffffffff1fffff1ffffffffff1ffff1fffffff11111f11111ffffff1111111111fffffffff111111ffff00000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05555555555555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01111111111111105555555555555555555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
015222222aa445101111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0156bbb72284a5101111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01560bb1721965101111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
015ffdcd651635101111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
015dfdc6656865101111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000
__gff__
0000000000000000010100000000000000000000000000000101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000200000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000001e1f000000000000000000000000000000202000202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000002e2f000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000003e3f000000000000000000000000000000002020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0809080908090809080908090809080908090809080908090809080908090809200000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1819181918191819181918191819181918191819181918191819181918191819000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0809080908090809080908090809080908090809080908090809080908090809000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1819181918191819181918191819181918191819181918191819181918191819000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000a0b00000a0b00000a0b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0928291a1b29291a1b29291a1b292a0800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
19383939393939393939393939393a1800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0c08090809080908090809080908090c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c18191819181918191819181918191c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c08090809080908090809080908091c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c18191819181918191819181918191c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c08090809080908090809080908091c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c18191819181918191819181918191c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c08090809080908090809080908091c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c18191819181918191819181918191c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c08090809080908090809080908091c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1c18191819181918191819181918191c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3b29292929292929292929292929292b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3839393939393939393939393939393a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000600000605001050060500305018000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
090600000305007050040500605003050060520605600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
